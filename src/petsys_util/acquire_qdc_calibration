#!/usr/bin/env python
# -*- coding: utf-8 -*-

from petsys import daqd, config, tofhir2x, tofhir2b
from copy import deepcopy
import argparse
import math
import time
import os.path
import sys
import pandas as pd
import numpy as np

def getActiveChannels(conn):
	return [ (p,s,a,c) for p,s,a in conn.getActiveAsics() for c in range(32) ]

def getActiveTACs(conn):
	return [ (p,s,a,c,t) for p,s,a,c in getActiveChannels(conn) for t in range(8) ]

dt = np.dtype([
        ('frameID', '<u8'),
	('channelID', '<u4'),
	('tacID', '<u2'),
	('t1Coarse', '<u2'),
	('t2Coarse', '<u2'),
	('qCoarse', '<u2'),
	('t1Fine', '<u2'),
        ('t2Fine', '<u2'),
	('qFine', '<u2'),
	('extra', '<u2'),
	('extra2', '<u4')
])

def main(argv):
	parser = argparse.ArgumentParser(description='Acquire data for QDC calibration')
	parser.add_argument("--config", type=str, required=True, help="Configuration file")
	parser.add_argument("-o", type=str, dest="fileNamePrefix", required=True, help="Data filename (prefix)")
        parser.add_argument("--att", type=int, required=True, choices=range(0, 8), help="Attenuator gain setting")
	args = parser.parse_args()

        fileNamePrefix = args.fileNamePrefix + ( "%d"%args.att )

	systemConfig = config.ConfigFromFile(args.config, loadMask=0x0)
	conn = daqd.Connection()
	conn.initializeSystem()
	systemConfig.loadToHardware(conn, bias_enable=config.APPLY_BIAS_OFF, qdc_mode="qdc")

	nPhases = 3
	nLengths = 12
        largeWindow = nLengths
	lengthStep = 1
	if not os.path.exists(fileNamePrefix) or not os.path.samefile(args.fileNamePrefix, "/dev/null"):
		f = open(fileNamePrefix + '.bins', 'w')
		f.write("%d\t%f\t%f\n" % (nPhases*nLengths/lengthStep, 0, nLengths))
		f.close()

	asicsConfig = conn.getAsicsConfig()
	for ac in asicsConfig.values():
		ac.globalConfig.setValue("c_ext_tp_en", 1)
		for cc in ac.channelConfig:
			# Disable channel from triggering.
			# Will selectively enable channels below
			cc.setValue("c_tgr_main", 0b11)
			#cc.setValue("cfg_a2_attenuator_dc_cancel_en", 0)
			cc.setValue("c_min_q", 0)
			cc.setValue("c_max_q", largeWindow)
                        cc.setValue("cfg_a2_attenuator_gain", args.att)

        # Clamp down simulatenous channels due to system limitations
	# 62/(12*2) -- GbE interface: 63 events/frame with unit, 12 ports per unit, 2 ASIC per port
	# 1024/180 -- ASIC TX: 1024 clock/frame (x1 SDR), 160 bits per event (TOFHiR 2B bug)
	simultaneousChannels = min([62/(12*2), 1024/180])

	channelStep = int(math.ceil(32.0/simultaneousChannels))

	t_start1 = time.time()

	print(asicsConfig.values()[0].__class__)
	if len(asicsConfig) > 0 and isinstance(asicsConfig.values()[0], tofhir2b.AsicConfig):
		# TOFHiR 2B needs the QDC to be trimmed

		print "Triming QDC"
                channel_trimmed = {}
		for p,s,a,c in getActiveChannels(conn):
			channel_trimmed[(p,s,a,c)] = False

                # Variables for smart converging:
                # 1) fastPace==True phase: steps of 8, until at least one channel is meeting stop conditions. No channel trim is set yet
                # 2) qdc_trim is increased by 7
                # 3) fastPace==False phase: steps of 1, until all channels meet condition. Channel trim values are set
                trimStep = 8
                fastPace = True
                qdc_trim = 63
                while qdc_trim > -1 :

			if False not in channel_trimmed.values():
				# All channels have been trimmed
				break


			sys.stdout.write( "Trim: %d " % qdc_trim )
                        sys.stdout.flush()


                        for p,s,a,c in getActiveChannels(conn):
				if not channel_trimmed[(p,s,a,c)]:
					asicsConfig[(p,s,a)].channelConfig[c].setValue("cfg_a2_dc_trim", qdc_trim)

                        df_chan = []
			for firstChannel in range(0, channelStep):
				activeChannels = [ channel for channel in range(firstChannel, 32, channelStep) ]
                                allTrimmed = True
		                for p,s,a,c in getActiveChannels(conn):
			                if c in activeChannels and channel_trimmed[(p,s,a,c)] == False:
                                                allTrimmed = False
                                if allTrimmed:
                                        continue

			        sys.stdout.write( "." )
                                sys.stdout.flush()

				# Enable triggering for active channels
				cfg = deepcopy(asicsConfig)
				for ac in cfg.values():
					for channel in activeChannels:
						ac.channelConfig[channel].setValue("c_tgr_main", 0b01)
				conn.setAsicsConfig(cfg)

                                df_phase = {}
				for n in range(nPhases):
					phase = float(n) / nPhases
                                        df_int = {}
					for integrationTime in [1, largeWindow]:

						conn.set_test_pulse_febds(integrationTime, 1024, phase, False)

                                                # Acquire 1000 frames (6.4 ms) and convert output in numpy array first, and pandas dataframe
                                                nparr = np.frombuffer(conn.acquireAsBytes(0.0064), dt)
                                                df2 = pd.DataFrame( nparr )

                                                # create table with one line per channel, and multiindex column: both number of events and sum of qFine values are stored for each tacID
                                                df_int[integrationTime] = pd.pivot_table(df2, values="qFine", index=["channelID"], columns=["tacID"], aggfunc=[np.sum,len])

                                        # add dataframes for different integration windows as new columns (with additional index level)
                                        df_phase[n] = pd.concat(df_int,axis=1)

                                # add dataframes for different phases as new columns (with additional index level), and rename the indexing levels
                                df_chan.append( pd.concat(df_phase,axis=1,names=['phase','int_t','oper','tacID']) )

                        # append all dataframes in a single one, with one row per channel
                        df = pd.concat(df_chan)
                        print("")

			for p,s,a,c in getActiveChannels(conn):
				if channel_trimmed[(p,s,a,c)] == True:
                                        continue

                                # create dataframe with one line per phase/tacID configuration and columns for integration time and count/sum operations
                                ch_res = df.loc[c+32*(a+64*(s+32*p))].unstack(level=['int_t','oper'])

                                # stopping conditions
                                if len(ch_res[ (ch_res[largeWindow,'len']<10) |
                                               (ch_res[1,'len']<10) |
                                               (ch_res[largeWindow,'sum']/ch_res[largeWindow,'len']>ch_res[1,'sum']/ch_res[1,'len']) ]) >= (8 * 2):
                                        if fastPace:
                                                # stop fastPace phase
                                                fastPace = False
                                                trimStep = 1
                                                qdc_trim = qdc_trim + 8
                                        else:
                                                # trim channel
					        channel_trimmed[(p,s,a,c)] = True
                                                # asicsConfig[(p,s,a)].channelConfig[c].setValue("cfg_a2_dc_trim", qdc_trim+1)

                        qdc_trim = qdc_trim - trimStep


		if not os.path.exists(fileNamePrefix) or not os.path.samefile(args.fileNamePrefix, "/dev/null"):
			f = open(fileNamePrefix + '.trim', 'w')
			for p,s,a,c in getActiveChannels(conn):
				f.write("%d\t%d\t%d\t%d\t%d\n" % (p, s, a, c, asicsConfig[(p,s,a)].channelConfig[c].getValue("cfg_a2_dc_trim")))
			f.close()

	else:
		# For TOFHiR 2X just write -1 as the trim value
		if not os.path.exists(fileNamePrefix) or not os.path.samefile(args.fileNamePrefix, "/dev/null"):
			f = open(fileNamePrefix + '.trim', 'w')
			for p,s,a,c in getActiveChannels(conn):
				f.write("%d\t%d\t%d\t%d\t%d\n" % (p, s, a, c, 0))
			f.close()


	t_finish1 = time.time()
	# Main data acquisition

	conn.openRawAcquisition(fileNamePrefix, calMode=True)
	for firstChannel in range(0, channelStep):
		activeChannels = [ channel for channel in range(firstChannel, 32, channelStep) ]
		activeChannels_string = (", ").join([ "%d" % channel for channel in activeChannels ])

		# Enable triggering for active channels
		cfg = deepcopy(asicsConfig)
		for ac in cfg.values():
			for channel in activeChannels:
				ac.channelConfig[channel].setValue("c_tgr_main", 0b01)
		conn.setAsicsConfig(cfg)

		for phase in [float(x)/nPhases for x in range(nPhases)]:
			for integrationTime in range(1, nLengths, lengthStep):
				t_start = time.time()
				conn.set_test_pulse_febds(integrationTime, 1024, phase, False)
				conn.acquire(0.02, integrationTime, phase)
				t_finish = time.time()
				print "Channel(s): %s Phase: %4.3f clk Length %d clk in %3.2f seconds " % (activeChannels_string, phase, integrationTime, t_finish - t_start)

	systemConfig.loadToHardware(conn, bias_enable=config.APPLY_BIAS_OFF)
	t_finish2 = time.time()
        print( "Time for trimming %f " % (t_finish1-t_start1) )
        print( "Time for acquisition %f " % (t_finish2-t_finish1) )
	return 0

if __name__ == '__main__':
	sys.exit(main(sys.argv))
