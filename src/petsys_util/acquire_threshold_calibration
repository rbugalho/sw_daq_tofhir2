#!/usr/bin/env python
# -*- coding: utf-8 -*-

from petsys import daqd, config
from copy import deepcopy
import argparse
from time import sleep, time
import ROOT
from sys import stdout
from shutil import copyfile

parser = argparse.ArgumentParser(description='Acquire data for threshold calibration')
parser.add_argument("--config", type=str, required=True, help="Configuration file")
parser.add_argument("-o", type=str, dest="outFilePrefix", required=True, help="Data file prefix")
parser.add_argument("--nreads-noise", dest="noise_reads", type=int, required=False, default=4)
parser.add_argument("--nreads-dark", dest="dark_reads", type=int, required=False, default=4)
parser.add_argument("--no-bias", dest="no_bias", action="store_true", required=False, default=False)
args = parser.parse_args()

if args.no_bias:
	loadMask = 0x0
	bias_enable_noise = config.APPLY_BIAS_OFF
	bias_enable_dark = config.APPLY_BIAS_OFF
else:
	loadMask = config.LOAD_BIAS_CALIBRATION | config.LOAD_BIAS_SETTINGS
	bias_enable_noise = config.APPLY_BIAS_PREBD
	bias_enable_dark = config.APPLY_BIAS_ON
	

systemConfig = config.ConfigFromFile(args.config, loadMask=loadMask)
daqd = daqd.Connection()
daqd.initializeSystem()
systemConfig.loadToHardware(daqd, bias_enable=bias_enable_noise)
asicsConfig = daqd.getAsicsConfig()


COUNTER_SETTING = 2**22
COUNT_MAX = 1.0 * COUNTER_SETTING
T = COUNT_MAX * (1 / daqd.getSystemFrequency())


thresholdList = [ 
	(0,  "cfg_a3_ith_t1", "baseline_t" ),
	(1,  "cfg_a3_ith_t2", "baseline_t" ),
	(2,  "cfg_a3_ith_e", "baseline_e")
]

activeAsics = daqd.getActiveAsics()
activeChannels = [ (portID, slaveID, chipID, channelID) for channelID in range(32) for portID, slaveID, chipID in activeAsics ]

# Adjust baseline

for (portID, slaveID, chipID), ac in asicsConfig.items():
	if not ac: continue
	gc = ac.globalConfig
	
	
	gc.setValue("c_counter_en", 0b1)
	gc.setValue("c_counter_t", COUNTER_SETTING)
	for cc in ac.channelConfig:
		cc.setValue("c_tgr_main", 0)
		cc.setValue("c_count", 0x2)
		cc.setValue("c_latch_B", 0)
		


##print "Adjusting baseline"
##for thresholdIndex, thresholdName, baselineName in thresholdList:
	##print thresholdIndex, thresholdName, baselineName

	##N_ITERATIONS = 0
	##while N_ITERATIONS < 20:
		##print baselineName, "ITERATION %d" % N_ITERATIONS

		##for ac in asicsConfig.values():
			##for cc in ac.channelConfig:
				##cc.setValue("cfg_a3_vth_t1", 63)
				##cc.setValue("cfg_a3_vth_t2", 63)
				##cc.setValue("cfg_a3_vth_e", 63)
				##cc.setValue("trigger_mode_2_b", thresholdIndex)
				##cc.setValue(thresholdName, 61)
		##daqd.setAsicsConfig(asicsConfig)
		##sleep(1 * T)
		##sleep(counter_sharing * T)

		##count_high = {}
		##for portID, slaveID, chipID, channelID in activeChannels:
			##v = daqd.read_mem_ctrl(portID, slaveID, 5, 24, 64*chipID + channelID, 1)
			##v = v[0]
			##v = v / COUNT_MAX
			##count_high[(portID, slaveID, chipID, channelID)] = v


		##adjustmentMade = False
		##for portID, slaveID, chipID, channelID in activeChannels:
			##b = asicsConfig[(portID, slaveID, chipID)].channelConfig[channelID].getValue(baselineName)
			##channelOK = True
			##if count_high[(portID, slaveID, chipID, channelID)] < 0.95:
				##channelOK = False
				##if b > 0:
					##new_b = b - 1
					##adjustmentMade = True
				##else:	
					##new_b = b

			##else:
				##new_b = b
			
			##asicsConfig[(portID, slaveID, chipID)].channelConfig[channelID].setValue(baselineName, new_b)

			##if not channelOK:
				##print "Channel (%2d %2d %2d %2d) | %6.1f%% active | %2d -> %2d" % (portID, slaveID, chipID, channelID, 100.0*count_high[(portID, slaveID, chipID, channelID)], b, new_b)


		##N_ITERATIONS += 1
		##if not adjustmentMade: break


outFile = open(args.outFilePrefix + "_baseline.tsv", "w")
for portID, slaveID, chipID, channelID in activeChannels:
	#baseline_T = asicsConfig[(portID, slaveID, chipID)].channelConfig[channelID].getValue("baseline_t")
	#baseline_E = asicsConfig[(portID, slaveID, chipID)].channelConfig[channelID].getValue("baseline_e")
	baseline_T = 0
	baseline_E = 0

	outFile.write("%d\t%d\t%d\t%d\t%d\t%d\n" % (
		 portID, slaveID, chipID, channelID,
		 baseline_T, baseline_E
	))
outFile.close()

#
# Measure noise/baseline
# 
outFile = open(args.outFilePrefix + "_noise.tsv", "w")
print "Scanning threshold for noise"
noiseProfiles = {}
for thresholdIndex, thresholdName, baselineName in thresholdList:
	stdout.write("%6s " % thresholdName); stdout.flush()

	for thresholdValue in range(0,64):
		for ac in asicsConfig.values():
			for cc in ac.channelConfig:
				cc.setValue("cfg_a3_ith_t1", 63)
				cc.setValue("cfg_a3_ith_t2", 63)
				cc.setValue("cfg_a3_ith_e", 63)
				cc.setValue("c_tgr_B", thresholdIndex)
				cc.setValue(thresholdName, thresholdValue)

		daqd.setAsicsConfig(asicsConfig)
		sleep(1*T)
		next_read_start_time = time() + T + 1E-3
		for n in range(args.dark_reads):
			s = next_read_start_time - time()
			if s > 0: sleep(s)
			next_read_start_time = time() + T + 1E-3
			
			for portID, slaveID, chipID in activeAsics:
				vv = daqd.read_mem_ctrl(portID, slaveID, 5, 8, 24, 32*chipID, 32)
                                for channelID, v in enumerate(vv):
					v = v / COUNT_MAX
					outFile.write("%d\t%d\t%d\t%d\t%s\t%d\t%f\n" % (portID, slaveID, chipID, channelID, thresholdName, thresholdValue, v))
					
			#for portID, slaveID, chipID, channelID in activeChannels:
				#Write out fraction of discriminator active time
				#v = daqd.read_mem_ctrl(portID, slaveID, 5, 8, 24, 32*chipID + channelID, 1)
				#v = v[0]
				#v = v / COUNT_MAX
				#outFile.write("%d\t%d\t%d\t%d\t%s\t%d\t%f\n" % (portID, slaveID, chipID, channelID, thresholdName, thresholdValue, v))

		stdout.write(".")
		stdout.flush()
		
	stdout.write("\n")
outFile.close()

copyfile(args.outFilePrefix + "_noise.tsv", args.outFilePrefix + "_dark.tsv")
##
## Measure dark counts
##
#outFile = open(args.outFilePrefix + "_dark.tsv", "w")
#for ac in asicsConfig.values():
	#if not ac: continue
	#gc = ac.globalConfig
	#for cc in ac.channelConfig:
		#cc.setValue("c_tgr_main", 0)
		#cc.setValue("c_count", 0xC)
		#cc.setValue("c_latch_B", 0)

#systemConfig.loadToHardware(daqd, bias_enable=bias_enable_dark)
#darkProfiles = {}
#print "Scanning threshold for dark counts"
#for thresholdIndex, thresholdName, baselineName in thresholdList:
	#stdout.write("%6s " % thresholdName); stdout.flush()
	#for thresholdValue in range(64):
		#for ac in asicsConfig.values():
			#for cc in ac.channelConfig:
				#cc.setValue("cfg_a3_vth_t1", 0)
				#cc.setValue("cfg_a3_vth_t2", 0)
				#cc.setValue("cfg_a3_vth_e", 0)
				#cc.setValue("c_tgr_B", thresholdIndex)
				#cc.setValue(thresholdName, thresholdValue)

		#daqd.setAsicsConfig(asicsConfig)
		#sleep(1*T)
		#next_read_start_time = time() + T + 1E-3
		#for n in range(args.dark_reads):
			#s = next_read_start_time - time()
			#if s > 0: sleep(s)
			#next_read_start_time = time() + T + 1E-3
			#for portID, slaveID, chipID, channelID in activeChannels:
				## Write out event frequency
				#v = daqd.read_mem_ctrl(portID, slaveID, 5, 8, 24, 32*chipID + channelID, 1)
				#v = v[0]
				#v = v / T
				#outFile.write("%d\t%d\t%d\t%d\t%s\t%d\t%f\n" % (portID, slaveID, chipID, channelID, thresholdName, thresholdValue, v))
				
		#stdout.write(".")
		#stdout.flush()
	#stdout.write("\n")
#outFile.close()
	
systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_OFF)

