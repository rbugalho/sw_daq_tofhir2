#!/usr/bin/env python
# -*- coding: utf-8 -*-

from petsys import tester_controller, config, spi
from copy import deepcopy
import argparse
import math
import time
import subprocess
import sys




def main():
	conn = tester_controller.Connection()
	parser = argparse.ArgumentParser(description='Set UUT power ON/OFF')
	parser.add_argument("-o", type=str, default=None, help="Output file")
	parser.add_argument("--mode", default="btl_fe", choices=["btl_fe", "bga"], help="Choose tester type")
	args = parser.parse_args()

	
	# We need to initialize TOFHiRs and enable the ALDO HV outputs to be able to measure HV
	# and reasonable DC currents
	conn.initializeSystem()

	asicsConfig = conn.getAsicsConfig()
	for ac in asicsConfig.values():
		gc = ac.globalConfig
		gc.setValue("c_aldo_en", 0b11)
		gc.setValue("c_aldo_range", 0b00) # Range for ALDO HV current measurement
		
		gc.setValue("Valdo_A_Gain", 0) # Select ALDO HV low range output
		gc.setValue("Valdo_A_DAC", 255) # Set ALDO HV to maximum
		gc.setValue("Valdo_B_Gain", 0) # Select ALDO HV low range output
		gc.setValue("Valdo_B_DAC", 255) # Select ALDO HV low range output

	conn.setAsicsConfig(asicsConfig)
	
	
	if args.o is not None:
		output_file = open(args.o, "w")
	else:
		output_file = sys.stdout
		
	
	mm = [ m for (p,s,m), tester in sorted(conn.get_testers().items()) ]
	tt = [ tester for (p,s,m), tester in sorted(conn.get_testers().items()) ]
	
	output_file.write("# Tester port:\t%s\n" % ("\t").join([ str(m) for m in mm ]))
	
	if args.mode == "btl_fe":
		output_file.write("Tester Vin (V):\t%s\n" % ("\t").join([ str(t.get_tester_vin()) for t in tt ]))
		output_file.write("Tester Temp 0 (ºC):\t%s\n" % ("\t").join([ "NaN" for t in tt ]))
		output_file.write("Tester Temp 1 (ºC):\t%s\n" % ("\t").join([ "NaN" for t in tt ]))
		output_file.write("UUT Vin (V):\t%s\n" % ("\t").join([ str(t.get_uut_vin()) for t in tt ]))
		output_file.write("UUT Iin (A):\t%s\n" % ("\t").join([ str(t.get_uut_iin()) for t in tt ]))
		output_file.write("UUT Vdd0  (V):\t%s\n" % ("\t").join([ str(t.get_uut_1V2(0)) for t in tt ]))
		output_file.write("UUT Vdd1  (V):\t%s\n" % ("\t").join([ str(t.get_uut_1V2(1)) for t in tt ]))
		conn.set_tec_power(True)
		output_file.write("UUT TEC path (ohm):\t%s\n" % ("\t").join([ str(t.get_tec_resistance()) for t in tt ]))
		conn.set_tec_power(False)
		output_file.write("UUT PT1000 path 0 (ohm):\t%s\n" % ("\t").join([ str(t.get_pt1000_resistance()[0]) for t in tt ]))
		output_file.write("UUT PT1000 path 1 (ohm):\t%s\n" % ("\t").join([ str(t.get_pt1000_resistance()[1]) for t in tt ]))
		output_file.write("UUT PT1000 path 2 (ohm):\t%s\n" % ("\t").join([ str(t.get_pt1000_resistance()[2]) for t in tt ]))
		output_file.write("UUT PT1000 path 3 (ohm):\t%s\n" % ("\t").join([ str(t.get_pt1000_resistance()[3]) for t in tt ]))
	else:
		output_file.write("Tester Vin (V):\t%s\n" % ("\t").join([ str(t.get_tester_vin()) for t in tt ]))
		output_file.write("UUT0 Vdd  (V):\t%s\n" % ("\t").join([ str(t.get_uut_vin(0)) for t in tt ]))
		output_file.write("UUT1 Vdd  (V):\t%s\n" % ("\t").join([ str(t.get_uut_vin(1)) for t in tt ]))
		output_file.write("UUT0 Idd  (V):\t%s\n" % ("\t").join([ str(t.get_uut_iin(0)) for t in tt ]))
		output_file.write("UUT1 Idd  (V):\t%s\n" % ("\t").join([ str(t.get_uut_iin(1)) for t in tt ]))
		output_file.write("UUT0 Vbg  (V):\t%s\n" % ("\t").join([ str(t.get_uut_vbg(0)) for t in tt ]))
		output_file.write("UUT1 Vbg  (V):\t%s\n" % ("\t").join([ str(t.get_uut_vbg(1)) for t in tt ]))


	return 0



if __name__ == "__main__":
	main()

